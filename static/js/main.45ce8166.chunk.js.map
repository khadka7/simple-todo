{"version":3,"sources":["serviceWorker.js","components/todo/Item.js","components/todo/List.js","components/todo/Header.js","components/todo/Input.js","components/todo/Container.js","index.js"],"names":["Boolean","window","location","hostname","match","Item","this","props","todo","completed","id","title","className","type","checked","onChange","handleChangeProps","onClick","deleteTodoProps","style","fontStyle","color","opacity","textDecoration","React","Component","List","todos","map","key","Header","padding","lineHeight","fontSize","marginBottom","Input","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoItemProps","onSubmit","placeholder","Conatiner","uuid","handleChange","deleteTodo","filter","addTodoItem","newTodo","ReactDOM","render","Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45ce8166.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nclass Item extends React.Component {\r\n    render() {\r\n        const completedStyle = {\r\n            fontStyle: \"italic\",\r\n            color: \"#d35e0f\",\r\n            opacity: \"0.8\",\r\n            textDecoration: \"line-through\"\r\n        }\r\n        const {completed,id,title} = this.props.todo\r\n        return (\r\n            <li className=\"todo-item\">\r\n                <input type=\"checkbox\"\r\n                    checked={completed}\r\n                    onChange={() => this.props.handleChangeProps(id)}\r\n                // onChange={() => { this.props.handleChangeProps(this.props.todo.id) }}\r\n                />\r\n                <button\r\n                    onClick={() => this.props.deleteTodoProps(id)}\r\n                >\r\n                    delete\r\n                </button>\r\n                <span style={this.props.todo.completed ? completedStyle : null}>\r\n                    {title}\r\n                </span>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Item","import React from \"react\"\r\nimport Item from \"./Item\"\r\nclass List extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.todos.map(todo => (\r\n                        <Item\r\n                            key={todo.id}\r\n                            todo={todo}\r\n                            handleChangeProps={this.props.handleChangeProps}\r\n                            deleteTodoProps ={this.props.deleteTodoProps}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React from \"react\"\r\nclass Header extends React.Component {\r\n    render() {\r\n        const headerStyle = {\r\n            padding: '20px 0',\r\n            lineHeight: '2em'\r\n\r\n        }\r\n        return (\r\n            <header style={headerStyle}>\r\n                <h1 style={{ fontSize: '25px', marginBottom: '15px' }}>This is header</h1>\r\n                <p style={{ fontSize: '20px' }}>Some description here.</p>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header","import React, { Component } from \"react\"\r\nclass Input extends Component {\r\n    state = {\r\n        title: \"\"\r\n    }\r\n    onChange = e => {\r\n        this.setState({\r\n            //   title: e.target.value\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.addTodoItemProps(this.state.title)\r\n        this.setState({\r\n            title: \"\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"form-container\">\r\n                <input type=\"text\"\r\n                    className=\"input-text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Add todo ....\"\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input type=\"submit\" className=\"input-submit\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Input","import React from \"react\"\r\nimport List from \"./List\"\r\nimport Header from \"./Header\"\r\nimport Input from \"./Input\"\r\nimport {v4 as uuid} from \"uuid\"\r\n\r\nclass Conatiner extends React.Component {\r\n    state = {\r\n        todos: [\r\n            {\r\n                id: uuid(),\r\n                title: \"Name 1\",\r\n                completed: true\r\n            },\r\n            {\r\n                id: uuid(),\r\n                title: \"HEllo\",\r\n                completed: false\r\n            },\r\n            {\r\n                id: uuid(),\r\n                title: \"tea\",\r\n                completed: false\r\n            },\r\n            {\r\n                id: uuid(),\r\n                title: \"De\",\r\n                completed: false\r\n            }\r\n        ]\r\n    }\r\n    handleChange = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo\r\n            })\r\n        })\r\n    }\r\n    deleteTodo = id => {\r\n        this.setState({\r\n            todos: [\r\n                ...this.state.todos.filter(todo => {\r\n                    return todo.id !== id\r\n                })\r\n            ]\r\n        })\r\n    }\r\n    addTodoItem = title => {\r\n        const newTodo = {\r\n            id: uuid(),\r\n            title: title,\r\n            completed: false\r\n        }\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Header></Header>\r\n                <Input\r\n                    addTodoItemProps={this.addTodoItem}\r\n                />\r\n                <List\r\n                    todos={this.state.todos}\r\n                    handleChangeProps={this.handleChange}\r\n                    deleteTodoProps={this.deleteTodo}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Conatiner","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Container from \"./components/todo/Container\"\nimport './Main.css';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <Container></Container>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}